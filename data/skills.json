{
  "programming_languages": ["python", "java", "c", "c++", "c#", "javascript", "typescript", "ruby", "go", "swift", "kotlin"],
  "web_development": ["html", "css", "javascript", "react", "angular", "vue", "django", "flask", "node.js", "express"],
  "database": ["mysql", "postgresql", "sqlite", "mongodb", "redis", "oracle"],
  "tools_and_platforms": ["git", "docker", "kubernetes", "aws", "azure", "gcp", "firebase", "linux"],
  "machine_learning": ["tensorflow", "pytorch", "scikit-learn", "keras", "pandas", "numpy", "opencv", "matplotlib"],
  "soft_skills": ["communication", "teamwork", "problem solving", "leadership", "time management", "adaptability"]
}



import json




def analyze_answer_with_ai(answer, question, groq_client, model="mixtral-8x7b-32768"):
    prompt = (
        f"Question: {question}\n"
        f"Candidate's Answer: {answer}\n"
        "As an HR interviewer, rate the answer from 1 to 10 and provide a brief justification. "
        "Respond in JSON: {\"score\": <score>, \"justification\": \"...\"}"
    )
    response = groq_client.chat.completions.create(
        model=model,
        messages=[{"role": "user", "content": prompt}],
        max_tokens=100,
        temperature=0.3,
        n=1,
    )

    try:
        result = json.loads(response.choices[0].message.content)
        return result["score"], result["justification"]
    except Exception:
        return None, "Could not parse AI response."





import pyttsx3
import speech_recognition as sr
import tempfile
import os

def ask_question(txt):
    # Initialize the text-to-speech engine
    engine = pyttsx3.init()
    engine.say(txt)
    engine.runAndWait()
    
def listen_for_answer(timeout=15):
    # listen for an answer using the microphone
    recognizer = sr.Recognizer()
    mic= sr.Microphone()
    with mic as source:
        print("Listening for an answer...")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source, timeout=timeout)
    try:
        answer = recognizer.recognize_google(audio)
        print(f"Candidate said: {answer}")
        return answer
    except sr.UnknownValueError:
        print("Could not understand the audio")
        return ""
    except sr.RequestError as e:
        print(f"Could not request results; {e}")
        return ""


